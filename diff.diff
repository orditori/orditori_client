diff --git a/lib/main.dart b/lib/main.dart
index 355bef1..0426599 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -6,6 +6,7 @@ import 'package:flutter/services.dart';
 import 'package:intl/intl.dart';
 
 import 'package:flutter/material.dart';
+import 'package:microfrontends/microfrontends.dart';
 import 'package:orditori/models/notebookentry.dart';
 import 'package:orditori/models/response.dart';
 import 'package:shared_preferences/shared_preferences.dart';
@@ -20,6 +21,65 @@ void main() {
   runApp(Orditori());
 }
 
+abstract class AuthState {}
+
+class Unresolved extends AuthState {}
+
+class Unauthenticated extends AuthState {}
+
+class Authenticated extends AuthState {
+  final String token;
+
+  Authenticated(this.token);
+}
+
+class Failed extends AuthState {
+  final String errorMessage;
+
+  Failed(this.errorMessage);
+}
+
+class AuthBinding extends Binding<AuthState> {
+  AuthBinding({required Widget child}) : super(child: child);
+
+  @override
+  StateContainer<AuthState> create(BuildContext context) {
+    return container<AuthState>(Unresolved())
+      ..boot((context) async* {
+        try {
+          final token = await readToken();
+
+          if (token == null) {
+            yield Unauthenticated();
+          } else {
+            yield Authenticated(token);
+          }
+        } catch (err) {
+          yield Failed(err.toString());
+        }
+      });
+  }
+}
+
+class MainScreen extends StatelessWidget {
+  const MainScreen({Key? key}) : super(key: key);
+
+  @override
+  Widget build(BuildContext context) {
+    return AuthBinding(
+      child: context.subscribe<AuthState>(
+        builder: (context, authState, child) {
+          if (authState is Unresolved) return Container();
+          if (authState is Failed) return Text(authState.errorMessage);
+          if (authState is Unauthenticated) return Settings();
+          if (authState is Authenticated) return Home();
+          throw new Exception('Unknown auth state ${authState.runtimeType}');
+        },
+      ),
+    );
+  }
+}
+
 Future<String?> readToken() async {
   final prefs = await SharedPreferences.getInstance();
   return prefs.getString('api_key');
@@ -51,24 +111,7 @@ class Orditori extends StatelessWidget {
           ),
         ),
       ),
-      home: FutureBuilder(
-        future: readToken(),
-        builder: (context, AsyncSnapshot<String?> snapshot) {
-          if (snapshot.connectionState == ConnectionState.done) {
-            final apiKey = snapshot.data;
-
-            if (apiKey == null) {
-              return Settings();
-            } else {
-              return Home();
-            }
-          } else if (snapshot.hasError) {
-            return Text(snapshot.data.toString());
-          } else {
-            return Container();
-          }
-        },
-      ),
+      home: MainScreen(),
     );
   }
 }
